
@article{courtes_functional_2013,
  archivePrefix = {arXiv},
  eprinttype = {arxiv},
  eprint = {1305.4584},
  primaryClass = {cs},
  langid = {english},
  title = {Functional {{Package Management}} with {{Guix}}},
  url = {http://arxiv.org/abs/1305.4584},
  abstract = {We describe the design and implementation of GNU Guix, a purely functional package manager designed to support a complete GNU/Linux distribution. Guix supports transactional upgrades and roll-backs, unprivileged package management, per-user proﬁles, and garbage collection. It builds upon the low-level build and deployment layer of the Nix package manager. Guix uses Scheme as its programming interface. In particular, we devise an embedded domain-speciﬁc language (EDSL) to describe and compose packages. We demonstrate how it allows us to beneﬁt from the host general-purpose programming language while not compromising on expressiveness. Second, we show the use of Scheme to write build programs, leading to a “two-tier” programming system.},
  urldate = {2019-01-15},
  date = {2013-05-20},
  keywords = {Computer Science - Programming Languages},
  author = {Courtès, Ludovic},
  file = {/home/patryk/Zotero/storage/AZUACYXL/Courtès - 2013 - Functional Package Management with Guix.pdf}
}

@online{neidhardt_guix_2019,
  title = {Guix: {{A}} Most Advanced Operating System},
  url = {https://ambrevar.xyz/guix-advance/index.html},
  urldate = {2019-01-15},
  date = {2019},
  author = {Neidhardt, Pierre},
  file = {/home/patryk/Zotero/storage/BZGH792B/index.html}
}

@thesis{dolstra_purely_2006,
  langid = {english},
  location = {{S.l.}},
  title = {The Purely Functional Software Deployment Model},
  institution = {{[s.n.]}},
  date = {2006},
  author = {Dolstra, Eelco},
  file = {/home/patryk/Zotero/storage/3X5BTN7Q/Dolstra - 2006 - The purely functional software deployment model.pdf},
  note = {OCLC: 71702886}
}

@article{hudak_report_1992,
  title = {Report on the {{Programming Language Haskell}}: {{A Non}}-Strict, {{Purely Functional Language Version}} 1.2},
  volume = {27},
  issn = {0362-1340},
  url = {http://doi.acm.org/10.1145/130697.130699},
  doi = {10.1145/130697.130699},
  shorttitle = {Report on the {{Programming Language Haskell}}},
  abstract = {"Some half dozen persons have written technically on combinatory logic, and most of these, including ourselves, have published something erroneous. Since some of our fellow sinners are among the most careful and competent logicians on the contemporary scene, we regard this as evidence that the subject is refractory. Thus fullness of exposition is necessory for accurary; and excessive condensation would be false economy here, even more than it is ordinarily."},
  number = {5},
  journaltitle = {SIGPLAN Not.},
  urldate = {2019-01-15},
  date = {1992-05},
  pages = {1--164},
  author = {Hudak, Paul and Peyton Jones, Simon and Wadler, Philip and Boutel, Brian and Fairbairn, Jon and Fasel, Joseph and Guzmán, María M. and Hammond, Kevin and Hughes, John and Johnsson, Thomas and Kieburtz, Dick and Nikhil, Rishiyur and Partain, Will and Peterson, John}
}

@online{gnu_download_2019,
  title = {Download — {{GuixSD}}},
  url = {https://www.gnu.org/software/guix/download/},
  urldate = {2019-01-15},
  date = {2019},
  author = {{GNU}},
  file = {/home/patryk/Zotero/storage/TFVWESF8/download.html}
}

@online{sterlind_guix_2019,
  title = {Guix: {{An}} Advanced Operating System | {{Hacker News}}},
  url = {https://news.ycombinator.com/item?id=18902823},
  urldate = {2019-01-15},
  date = {2019},
  author = {{Sterlind}},
  file = {/home/patryk/Zotero/storage/SSABL3HJ/item.html}
}

@inproceedings{dolstra_nixos_2008,
  location = {{New York, NY, USA}},
  title = {{{NixOS}}: {{A Purely Functional Linux Distribution}}},
  isbn = {978-1-59593-919-7},
  url = {http://doi.acm.org/10.1145/1411204.1411255},
  doi = {10.1145/1411204.1411255},
  shorttitle = {{{NixOS}}},
  abstract = {Existing package and system configuration management tools suffer from an imperative model, where system administration actions such as upgrading packages or changes to system configuration files are stateful: they destructively update the state of the system. This leads to many problems, such as the inability to roll back changes easily, to run multiple versions of a package side-by-side, to reproduce a configuration deterministically on another machine, or to reliably upgrade a system. In this paper we show that we can overcome these problems by moving to a purely functional system configuration model. This means that all static parts of a system (such as software packages, configuration files and system startup scripts) are built by pure functions and are immutable, stored in a way analogously to a heap in a purely function language. We have implemented this model in NixOS, a non-trivial Linux distribution that uses the Nix package manager to build the entire system configuration from a purely functional specification.},
  booktitle = {Proceedings of the 13th {{ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  series = {{{ICFP}} '08},
  publisher = {{ACM}},
  urldate = {2019-01-15},
  date = {2008},
  pages = {367--378},
  keywords = {nix,NixOS,package management,purely functional deployment model,purely functional language,software deployment,system configuration management},
  author = {Dolstra, Eelco and Löh, Andres},
  file = {/home/patryk/Zotero/storage/5EDMPELH/Dolstra et Loh - NixOS A Purely Functional Linux Distribution.pdf}
}

@online{prins_creating_2019,
  langid = {english},
  title = {Creating a Reproducible Workflow with {{CWL}}},
  url = {https://gitlab.com/pjotrp/guix-notes/blob/master/WORKFLOW.org},
  abstract = {Notes on Guix},
  journaltitle = {GitLab},
  urldate = {2019-01-15},
  date = {2019},
  author = {Prins, Pjotr},
  file = {/home/patryk/Zotero/storage/RRNM34U3/WORKFLOW.html}
}

@inproceedings{wadler_essence_1992,
  langid = {english},
  location = {{Albuquerque, New Mexico, United States}},
  title = {The Essence of Functional Programming},
  isbn = {978-0-89791-453-6},
  url = {http://portal.acm.org/citation.cfm?doid=143165.143169},
  doi = {10.1145/143165.143169},
  abstract = {This paper explores the use monads to structure functional programs. No prior knowledge of monads or category theory is required. Monads increase the ease with which programs may be modi ed. They can mimic the e ect of impure features such as exceptions, state, and continuations; and also provide e ects not easily achieved with such features. The types of a program re ect which e ects occur.},
  eventtitle = {The 19th {{ACM SIGPLAN}}-{{SIGACT}} Symposium},
  booktitle = {Proceedings of the 19th {{ACM SIGPLAN}}-{{SIGACT}} Symposium on {{Principles}} of Programming Languages  - {{POPL}} '92},
  publisher = {{ACM Press}},
  urldate = {2019-01-16},
  date = {1992},
  pages = {1-14},
  author = {Wadler, Philip},
  file = {/home/patryk/Zotero/storage/L5JC8S57/Wadler - 1992 - The essence of functional programming.pdf}
}

@online{wikibooks_haskell_2017,
  title = {Haskell - {{Wikibooks}}, Biblioteka Wolnych Podręczników},
  url = {https://pl.wikibooks.org/wiki/Haskell#Haskell_vs_OOP_(Programowanie_obiektowe)},
  urldate = {2019-01-16},
  date = {2017},
  author = {{Wikibooks}},
  file = {/home/patryk/Zotero/storage/5I8HQGKN/Haskell.html}
}

@book{backfield_becoming_2014,
  langid = {english},
  title = {Becoming {{Functional}}: {{Steps}} for {{Transforming Into}} a {{Functional Programmer}}},
  isbn = {978-1-4919-4751-7},
  shorttitle = {Becoming {{Functional}}},
  abstract = {If you have an imperative (and probably object-oriented) programming background, this hands-on book will guide you through the alien world of functional programming. Author Joshua Backfield begins slowly by showing you how to apply the most useful implementation concepts before taking you further into functional-style concepts and practices.In each chapter, you’ll learn a functional concept and then use it to refactor the fictional XXY company’s imperative-style legacy code, writing and testing the functional code yourself. As you progress through the book, you’ll migrate from Java 7 to Groovy and finally to Scala as the need for better functional language support gradually increases.Learn why today’s finely tuned applications work better with functional codeTransform imperative-style patterns into functional code, following basic stepsGet up to speed with Groovy and Scala through examplesUnderstand how first-class functions are passed and returned from other functionsConvert existing methods into pure functions, and loops into recursive methodsChange mutable variables into immutable variablesGet hands-on experience with statements and nonstrict evaluationsUse functional programming alongside object-oriented design},
  pagetotal = {151},
  publisher = {{"O'Reilly Media, Inc."}},
  date = {2014-07-02},
  keywords = {Computers / General,Computers / Programming / General,Computers / Programming / Open Source,Computers / Programming Languages / C,Computers / Programming Languages / General,Computers / Programming Languages / Java,Computers / Programming Languages / JavaScript},
  author = {Backfield, Joshua},
  eprinttype = {googlebooks}
}

@inproceedings{molina-markham_private_2010,
  langid = {english},
  location = {{Zurich, Switzerland}},
  title = {Private Memoirs of a Smart Meter},
  isbn = {978-1-4503-0458-0},
  url = {http://portal.acm.org/citation.cfm?doid=1878431.1878446},
  doi = {10.1145/1878431.1878446},
  abstract = {Household smart meters that measure power consumption in real-time at ﬁne granularities are the foundation of a future smart electricity grid. However, the widespread deployment of smart meters has serious privacy implications since they inadvertently leak detailed information about household activities. In this paper, we show that even without a priori knowledge of household activities or prior training, it is possible to extract complex usage patterns from smart meter data using off-the-shelf statistical methods. Our analysis uses two months of data from three homes, which we instrumented to log aggregate household power consumption every second. With the data from our small-scale deployment, we demonstrate the potential for power consumption patterns to reveal a range of information, such as how many people are in the home, sleeping routines, eating routines, etc. We then sketch out the design of a privacy-enhancing smart meter architecture that allows an electric utility to achieve its net metering goals without compromising the privacy of its customers.},
  eventtitle = {The 2nd {{ACM Workshop}}},
  booktitle = {Proceedings of the 2nd {{ACM Workshop}} on {{Embedded Sensing Systems}} for {{Energy}}-{{Efficiency}} in {{Building}} - {{BuildSys}} '10},
  publisher = {{ACM Press}},
  urldate = {2019-01-17},
  date = {2010},
  pages = {61},
  author = {Molina-Markham, Andrés and Shenoy, Prashant and Fu, Kevin and Cecchet, Emmanuel and Irwin, David},
  file = {/home/patryk/Zotero/storage/KD9JNVBV/Molina-Markham et al. - 2010 - Private memoirs of a smart meter.pdf}
}

@online{owens_legion_2017,
  title = {Legion: {{Distributed}}, Stateful, Homogeneous Microservice Framework.},
  url = {http://hackage.haskell.org/package/legion},
  urldate = {2019-01-17},
  date = {2017},
  author = {Owens, Rick},
  file = {/home/patryk/Zotero/storage/36GADIJA/legion.html}
}

@video{feynman_take_1973,
  title = {Take the {{World}} from {{Another Point}} of {{View}}},
  url = {http://calteches.library.caltech.edu/35/2/PointofView.htm},
  urldate = {2019-01-20},
  date = {1973},
  director = {Feynman, Richard},
  file = {/home/patryk/Zotero/storage/5AKRQZDQ/PointofView.html}
}

@book{raymond_art_2003,
  langid = {english},
  title = {The {{Art}} of {{UNIX Programming}}},
  isbn = {978-0-13-246588-5},
  abstract = {The Art of UNIX Programming  poses the belief that understanding the unwritten UNIX engineering tradition and mastering its design patterns will help programmers of all stripes to become better programmers. This book attempts to capture the engineering wisdom and design philosophy of the UNIX, Linux, and Open Source software development community as it has evolved over the past three decades, and as it is applied today by the most experienced programmers. Eric Raymond offers the next generation of "hackers" the unique opportunity to learn the connection between UNIX philosophy and practice through careful case studies of the very best UNIX/Linux programs.},
  pagetotal = {560},
  publisher = {{Addison-Wesley Professional}},
  date = {2003-09-23},
  keywords = {Computers / Operating Systems / Linux,Computers / Operating Systems / UNIX},
  author = {Raymond, Eric S.}
}

@book{milewski_category_2018,
  langid = {english},
  title = {Category {{Theory}} for {{Programmers}}},
  url = {http://www.blurb.com/b/9008339-category-theory-for-programmers},
  abstract = {Category Theory is one of the most abstract branches of mathematics. It is usually taught to graduate students after they have mastered several other branches of mathematics, like algebra, topology, and group theory. It might therefore come as a shock that the basic concepts of category theory can be explained in relatively simple terms to anybody with some experience in programming.

That's because, just like programming, category theory is about structure. Mathematicians discover structure in mathematical theories, programmers discover structure in computer programs. Well structured programs are easier to understand and maintain, and are less likely to contain bugs. Category theory provides the language to talk about structure, and learning it will make you a better programmer.},
  publisher = {{University of Texas}},
  urldate = {2019-01-20},
  date = {2018},
  author = {Milewski, Bartosz},
  file = {/home/patryk/Zotero/storage/6XQ28MWB/9008339-category-theory-for-programmers.html}
}

@incollection{andrews_churchs_2018,
  title = {Church's {{Type Theory}}},
  edition = {Summer 2018},
  url = {https://plato.stanford.edu/archives/sum2018/entriesype-theory-church/},
  abstract = {Church's type theory is a formal logical language which includes first-order logic, but is moreexpressive in a practical sense. It is used, with some modificationsand enhancements, in most modern applications of type theory. It isparticularly well suited to the formalization of mathematics andother disciplines and to specifying and verifying hardware andsoftware.  It also plays an important role in thestudy of the formal semantics of natural language., A great wealth of technical knowledge can be expressedvery naturally in it.  With possible enhancements, Church's typetheory constitutes an excellent formal language for representing theknowledge in automated information systems, sophisticated  automated reasoning systems, systems forverifying the correctness of mathematical proofs, and certain projects involving logic and artificial intelligence. Some examples are given in Section 1.2.2 below., Type theories are also called higher-order logics, since they allowquantification not only over individual variables (as in first-orderlogic), but also over function, predicate, and even higher ordervariables.  Type theories characteristically assign types to entities,distinguishing, for example, between numbers, set of numbers,functions from numbers to sets of numbers, and sets of such functions.As illustrated in Section 1.2.2 below, these distinctions allow one todiscuss the conceptually rich world of sets and functions withoutencountering the paradoxes of naive set theory., Church's type theory is a formulation of  type theory that was introduced by Alonzo Church in Church 1940. In certainrespects, it is simpler and more general than the type theoryintroduced by Bertrand Russell in Russell 1908 and Whitehead \& Russell 1927a. Sinceproperties and relations can be regarded as functions from entities totruth values, the concept of a function is taken as primitive inChurch's type theory, and the λ-notation which Churchintroduced in Church 1932 and Church 1941 is incorporated into the formallanguage.},
  booktitle = {The {{Stanford Encyclopedia}} of {{Philosophy}}},
  publisher = {{Metaphysics Research Lab, Stanford University}},
  urldate = {2019-01-20},
  date = {2018},
  keywords = {artificial intelligence: logic and,logic: classical,reasoning: automated,Russell; Bertrand,type theory},
  author = {Andrews, Peter},
  editor = {Zalta, Edward N.}
}

@article{church_formulation_1940,
  langid = {english},
  title = {A Formulation of the Simple Theory of Types},
  volume = {5},
  issn = {0022-4812, 1943-5886},
  url = {https://www.cambridge.org/core/journals/journal-of-symbolic-logic/article/formulation-of-the-simple-theory-of-types/85B3666C7DD81A4F66966A399364B44B},
  doi = {10.2307/2266170},
  abstract = {The purpose of the present paper is to give a formulation of the simple theory of types which incorporates certain features of the calculus of λ-conversion. A complete incorporation of the calculus of λ-conversion into the theory of types is impossible if we require that λx and juxtaposition shall retain their respective meanings as an abstraction operator and as denoting the application of function to argument. But the present partial incorporation has certain advantages from the point of view of type theory and is offered as being of interest on this basis (whatever may be thought of the finally satisfactory character of the theory of types as a foundation for logic and mathematics).For features of the formulation which are not immediately connected with the incorporation of λ-conversion, we are heavily indebted to Whitehead and Russell, Hilbert and Ackermann, Hilbert and Bernays, and to forerunners of these, as the reader familiar with the works in question will recognize.The class of type symbols is described by the rules that ı and o are each type symbols and that if α and β are type symbols then (αβ) is a type symbol: it is the least class of symbols which contains the symbols ı and o and is closed under the operation of forming the symbol (αβ) from the symbols α and β.},
  number = {2},
  journaltitle = {The Journal of Symbolic Logic},
  urldate = {2019-01-20},
  date = {1940-06},
  pages = {56-68},
  author = {Church, Alonzo},
  file = {/home/patryk/Zotero/storage/EAIMDYQ8/85B3666C7DD81A4F66966A399364B44B.html}
}


